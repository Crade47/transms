// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.15.8
// source: smsproto.proto

package smsproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Transms_FilterSenders_FullMethodName = "/smsproto.Transms/FilterSenders"
)

// TransmsClient is the client API for Transms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransmsClient interface {
	FilterSenders(ctx context.Context, in *SmsRequest, opts ...grpc.CallOption) (Transms_FilterSendersClient, error)
}

type transmsClient struct {
	cc grpc.ClientConnInterface
}

func NewTransmsClient(cc grpc.ClientConnInterface) TransmsClient {
	return &transmsClient{cc}
}

func (c *transmsClient) FilterSenders(ctx context.Context, in *SmsRequest, opts ...grpc.CallOption) (Transms_FilterSendersClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Transms_ServiceDesc.Streams[0], Transms_FilterSenders_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &transmsFilterSendersClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Transms_FilterSendersClient interface {
	Recv() (*SmsMessage, error)
	grpc.ClientStream
}

type transmsFilterSendersClient struct {
	grpc.ClientStream
}

func (x *transmsFilterSendersClient) Recv() (*SmsMessage, error) {
	m := new(SmsMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransmsServer is the server API for Transms service.
// All implementations must embed UnimplementedTransmsServer
// for forward compatibility
type TransmsServer interface {
	FilterSenders(*SmsRequest, Transms_FilterSendersServer) error
	mustEmbedUnimplementedTransmsServer()
}

// UnimplementedTransmsServer must be embedded to have forward compatible implementations.
type UnimplementedTransmsServer struct {
}

func (UnimplementedTransmsServer) FilterSenders(*SmsRequest, Transms_FilterSendersServer) error {
	return status.Errorf(codes.Unimplemented, "method FilterSenders not implemented")
}
func (UnimplementedTransmsServer) mustEmbedUnimplementedTransmsServer() {}

// UnsafeTransmsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransmsServer will
// result in compilation errors.
type UnsafeTransmsServer interface {
	mustEmbedUnimplementedTransmsServer()
}

func RegisterTransmsServer(s grpc.ServiceRegistrar, srv TransmsServer) {
	s.RegisterService(&Transms_ServiceDesc, srv)
}

func _Transms_FilterSenders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SmsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransmsServer).FilterSenders(m, &transmsFilterSendersServer{ServerStream: stream})
}

type Transms_FilterSendersServer interface {
	Send(*SmsMessage) error
	grpc.ServerStream
}

type transmsFilterSendersServer struct {
	grpc.ServerStream
}

func (x *transmsFilterSendersServer) Send(m *SmsMessage) error {
	return x.ServerStream.SendMsg(m)
}

// Transms_ServiceDesc is the grpc.ServiceDesc for Transms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smsproto.Transms",
	HandlerType: (*TransmsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FilterSenders",
			Handler:       _Transms_FilterSenders_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "smsproto.proto",
}
